<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
       https://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd">
    <context:component-scan base-package="com.zgy.shiro"/>

    <!-- 配置视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <mvc:default-servlet-handler/>
    <mvc:annotation-driven></mvc:annotation-driven>



<!--    &lt;!&ndash; ================= 下面是shiro和spring集成的配置 ================= &ndash;&gt;-->
<!--    &lt;!&ndash; Shiro's main business-tier object for web-enabled applications-->
<!--         (use DefaultSecurityManager instead when there is no web environment)&ndash;&gt;-->

<!--    &lt;!&ndash;1. 配置 SecurityManager! &ndash;&gt;-->
<!--    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
<!--        &lt;!&ndash; SecurityManager的三个属性 &ndash;&gt;-->
<!--        <property name="cacheManager" ref="cacheManager"/>-->
<!--        <property name="realm" ref="jdbcRealm"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; Let's use some enterprise caching support for better performance.  You can replace this with any enterprise-->
<!--         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc &ndash;&gt;-->
<!--    &lt;!&ndash;-->
<!--        2. 配置 CacheManager.-->
<!--            2.1 需要加入 ehcache 的 jar 包及配置文件.-->
<!--    &ndash;&gt;-->
<!--    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">-->
<!--        &lt;!&ndash; Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one-->
<!--             will be creaed with a default config:-->
<!--             <property name="cacheManager" ref="ehCacheManager"/> &ndash;&gt;-->
<!--        &lt;!&ndash; If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want-->
<!--             a specific Ehcache configuration to be used, specify that here.  If you don't, a default-->
<!--             will be used.: &ndash;&gt;-->
<!--        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; Used by the SecurityManager to access security data (users, roles, etc).-->
<!--         Many other realm implementations can be used too (PropertiesRealm, LdapRealm, etc.-->
<!--     &ndash;&gt;-->
<!--    &lt;!&ndash;-->
<!--         3. 配置 Realm-->
<!--    	    3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean-->
<!--    &ndash;&gt;-->
<!--    <bean id="jdbcRealm" class="com.zgy.shiro.realm.ShiroRealm">-->
<!--    </bean>-->


<!--    &lt;!&ndash; === Shiro Spring-specific integration === &ndash;&gt;-->
<!--    &lt;!&ndash; Post processor that automatically invokes init() and destroy() methods-->
<!--         for Spring-configured Shiro objects so you don't have to-->
<!--         1) specify an init-method and destroy-method attributes for every bean definition and-->
<!--         2) even know which Shiro objects require these methods to be called.-->
<!--    &ndash;&gt;-->
<!--    &lt;!&ndash; 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法. &ndash;&gt;-->
<!--    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->

<!--    &lt;!&ndash; Enable Shiro Annotations for Spring-configured beans.  Only run after the lifecycleBeanProcessor has run: &ndash;&gt;-->
<!--    &lt;!&ndash; 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. &ndash;&gt;-->
<!--    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"-->
<!--          depends-on="lifecycleBeanPostProcessor"/>-->
<!--    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
<!--        <property name="securityManager" ref="securityManager"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash; Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml - -->
<!--         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us-->
<!--         to wire things with more control as well utilize nice Spring things such as-->
<!--         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: &ndash;&gt;-->
<!--    &lt;!&ndash;-->
<!--        6. 配置 ShiroFilter.-->
<!--            6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.-->
<!--                若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和-->
<!--                <filter-name> 名字对应的 filter bean.-->
<!--    &ndash;&gt;-->
<!--    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">-->
<!--        <property name="securityManager" ref="securityManager"/>-->
<!--        <property name="loginUrl" value="/login.jsp"/>-->
<!--        <property name="successUrl" value="/list.jsp"/>-->
<!--        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>-->
<!--        &lt;!&ndash;-->
<!--        	配置哪些页面需要受保护.-->
<!--        	以及访问这些页面需要的权限.-->
<!--        	1). anon 可以被匿名访问-->
<!--        	2). authc 必须认证(即登录)后才可能访问的页面.-->
<!--        	3). logout 登出.-->
<!--        	4). roles 角色过滤器-->
<!--        &ndash;&gt;-->
<!--        <property name="filterChainDefinitions">-->
<!--            <value>-->
<!--                /login.jsp = anon-->
<!--                # everything else requires authentication:-->
<!--                /** = authc-->
<!--            </value>-->
<!--        </property>-->
<!--    </bean>-->
</beans>
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- 配置自动扫描的包 , 在spring mvc2之中扫描不到下面的包, 所以, 此处采用了挪动一个包的方式来完成基本的CRUD-->
	<!-- 在原来的spring mvc2之中, 准备采用java config 的方式来完成动基本的CRUD-->
	<context:component-scan base-package="com.zgy.learn"/>

	<!-- 配置视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
	</bean>

    <!--
        default-servlet-handler 将在 SpringMVC 上下文中定义一个 DefaultServletHttpRequestHandler,
		它会对进入 DispatcherServlet 的请求进行筛查, 如果发现是没有经过映射的请求, 就将该请求交由 WEB 应用服务器默认的
		Servlet 处理. 如果不是静态资源的请求，才由 DispatcherServlet 继续处理

		一般 WEB 应用服务器默认的 Servlet 的名称都是 default.
		若所使用的 WEB 服务器的默认 Servlet 名称不是 default，则需要通过 default-servlet-name 属性显式指定
	-->

    <!-- 处理静态资源的请求 -->
	<!--静态资源访问  -->
	<mvc:default-servlet-handler/>
	<!--把符合/js/**匹配规则的请求,映射到目录/WEB-INF/js/下-->
	<!--
	      /WEB-INF/js/是文件存放的地方,而我们的mapping,则是要把他映射到一个URL上面, 此处我们就映射到了:
	      http://localhost:8080/js/jquery-1.9.1.min.js 这个URL上面, 如果/**的话, 那么就映射到
	      http://localhost:8080/jquery-1.9.1.min.js 上面了
	      配上mvcLresource ,方便自己使用, URL很快就可以知道!
	 -->
	<mvc:resources mapping="/**" location="WEB-INF/js/"/>

	<!-- 开启注解模式 -->
	<mvc:annotation-driven/>

</beans>

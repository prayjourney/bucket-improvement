这个非常重要，是我们理解spring aop的基础。
代理模式有动态代理和静态代理两种。
###### 静态代理简单，但是所能代理的类或者说对象，已经是写死了的，虽然实现了调用者和被代理对象的解耦，
###### 但是，他却只能代理这个类，如果要想代理其他的类，那么就要新写代理类，这样扩展也不容易。


##### 动态代理的实现，解决了一个代理对象，只能代理一个或者是几个代理对象的问题，实现了代理对象的通用化，
##### 我们不必对每个被代理对象实现他们的代理对象，而使用通用的对象即可，其中
##### 我们使用到了java.lang.reflect包下面的Proxy类和InvocationHandler接口！
##### Proxy来实现通用的代理类，而InvocationHandler来实现方法的调用，
##### 在JDK动态代理之中，是对于interface接口的代理，Cglib可以代理类。
##### 还有第三种的方式，也就是JAVAssist，也可以实现动态代理。
